.glob puts
.glob memcpy
        
puts:
  push  r0             # save registers to be used
  push  r1
  mov   r15, r1        # save stack pointer
  loadi 6, r0          # add 3 words to access params
  add   r0, r1 
  load  r1, r0         # load param into r0

loop:                  # loop through string
  loadb r0, r1         # load byte
  test  r1, r1         # check if not nil byte
  br    output         # if byte is not nil, branch to output
  jr    done           # else branch to done
output:
  out   r1             # output byte
  inc   r0             # increment pointer
  jr    loop           # loop

done:
  loadi 0xa, r1        # output newline
  out   r1             #  
  pop   r1             # restore r1
  pop   r0             # restore r0
  ret                  # return


memcpy:
        push   r15            # save the stack pointer
        push   r0             # R0 will hold the word in transit
        push   r1             # R1 will be the loop counter
        push   r2             # R2 will hold DST
        push   r3             # R3 will hold SRC
        push   r4             # R4 will hold LEN
        mov    r15, r1        # save stack pointer
        loadi  0xe,  r0        # add 14 to access last param (len)         
        add    r0,  r1 
        load   r1,  r4        # ==> LEN IN R4
        loadi   2,  r0        # add another word to r1, to get next
        add    r0,  r1        # parameter (source)
        load   r1,  r3        # ==> SRC IN R3
        loadi   2,  r0        # same as before
        add    r0,  r1
        load   r1,  r2        # ==> DST IN R2
                              # let's initialize our loop counter.
        loadi   0,  r1        # don't worry, R15 is safely in the stack by now
        jr     whilemc       # just in case someone calls memcpy for len=0.
domc: 
        loadb   r3,r0         # get the word pointer to by r3 (SRC)
        storb   r0,r2         # write it to the memory pointed to by r2 (DST)
        inc     r3            # increment SRC
        inc     r2            # increment DST
        inc     r1            # increment counter
whilemc:    
        cmp     r1, r4        # have we reached LEN yet?
        br      domc          # if not, jump back to the top of the loop.
                              # end of the loop
        pop     r4            # now pop the registers off the stack to restore
        pop     r3
        pop     r2
        pop     r1
        pop     r0
        pop     r15           # restore the stack pointer!
        ret                   # it wasn't really necessary to save and restore
                              # the stack pointer in this case, since we
                              # already had reason to pop everything we pushed.
                              # Not a bad habit, though.
        
###################################################################

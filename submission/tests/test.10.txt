# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Test 10: Demonstration of mapbyte, using a
#          couple simple cyphers.
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

This test makes extensive use of the function calling conventions in xas,
and serves particularly well as a test of the following function-related
instructions:

call    callr   ret     push    pop

It also makes auxiliary, but heavy, use of

add     xor     br       jr     test
out

and a number of directives, but those are handled by the assembler. 

The memcpy function is also put to the test, here, along with a related
function I wrote called 'mapbyte'. Mapbyte() is similar to lisp's mapcar
function, except that it operates only on arrays, and only on arrays of
bytes (it shouldn't be difficult, in principle, to extend it to other
data types, by coupling it with an implementation of sizeof(), but I'll
save that for another time). It differs from memcpy() in taking an addit-
ional two parameters -- a function pointer and a parameter -- and using
them (via callr) to transform the byte that is in transit in the memcpy
process, after loading it from its source, and before storing it at its
destination. To illustrate it, I've used two simple encryption functions:
a rot3 Caesar cypher, and a xor encryption with a given key.

Since this test makes use of stdout, I have left the debug bit deactivated.
The expected (and confirmed) output of this programme is as shown:

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Hello, world!
Caesar cipher (with rot = 3): 
Khoor/#zruog$
Now rotating back (rot = -3): 
Hello, world!
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Now let's try a xor encryption (with key = 'GOODBYE, ALL.'): 
*#(-ue[O3 (
Decrypting...
Hello, world!
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
CPU has halted.

No bugs in the xcpu code were encountered in the course of this test
(although the test code itself was complex enough to supply plenty
of interesting debugging work). 

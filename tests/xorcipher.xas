# Lucca Fraser
# B00109376
# May 15, 2015
# 4 params: DST, SRC, LEN, ROT

.glob xorcipher

xorcipher:
        push   r15
        push   r14
        mov    r15, r14
        push   r0             # R0 will hold the word in transit
        push   r1             # R1 will be the loop counter
        push   r2             # R2 will hold DST
        push   r3             # R3 will hold SRC
        push   r4             # R4 will hold LEN
        push   r5             # R5 will hold KEY
        push   r6             # R6 will hold key byte
        loadi  6, r0
        add    r14, r0        # last param at base pointer+6
        load   r0, r2         # R2 <-- DST
        loadi  2, r1          
        add    r1, r0         
        load   r0, r3         # R3 <-- SRC
        add    r1, r0         
        load   r0, r4         # R4 <-- LEN
        add    r1, r0
        load   r0, r5         # R5 <-- KEY
        xor    r1, r1         # zero counter
        jr     while0         # just in case someone calls memcpy for len=0.
do0: 
        loadb   r3, r0        # get the word pointer to by r3 (SRC)
        test    r0, r0        # if we've reached the null byte, stop encrypting
        br      nonzero
        jr      onzero
nonzero:
        loadb   r5, r6 
        xor     r6, r0        # xor by key byte
onzero:
        storb   r0, r2        # write it to the memory pointed to by r2 (DST)
        inc     r5
        inc     r3            # increment SRC
        inc     r2            # increment DST
        inc     r1            # increment counter
while0:    
        cmp     r1, r4        # have we reached LEN yet?
        br      do0           # if not, jump back to the top of the loop.
                              # end of the loop
        pop     r6
        pop     r5
        pop     r4            # now pop the registers off the stack to restore
        pop     r3
        pop     r2
        pop     r1
        pop     r0
        pop     r14
        pop     r15           # restore the stack pointer!
        ret                   # it wasn't really necessary to save and restore
                              # the stack pointer in this case, since we
                              # already had reason to pop everything we pushed.
                              # Not a bad habit, though.
        
###################################################################

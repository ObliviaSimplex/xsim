
.glob xorcipher
.glob puts
.glob main

main:
        #std
        push   r15
        push   r14
        mov    r15, r14
        call   border
        loadi  hellostr, r1
        push   r1
        call   puts
        loadi  xorintro, r1
        push   r1
        call   puts
        pop    r1
        pop    r1
        loadi  target, r0        
        loadi  14, r2
        loadi  xorkey, r3
        push   r3    # XORKEY
        push   r2    # LEN
        push   r1    # SRC
        push   r0    # DST   
        call   xorcipher
        pop    r0
        pop    r1
        pop    r2
        pop    r3
        loadi  target, r0
        push   r0
        call   puts  # let's see if it worked
        pop    r0
        loadi  xoroutro, r0
        push   r0
        call   puts
        pop    r0
        loadi  target, r1
        loadi  target2, r0
        push   r3
        push   r2
        push   r1
        push   r0
        call   xorcipher
        call   puts
        call   border
        pop    r0
        xor    r0, r0
        mov    r14, r15
        pop    r14
        pop    r15
        ret

border:
        push   r15
        push   r14
        mov    r15, r14
        push r1
        push r2
        push r3
        xor r1, r1
        loadi 20, r2
bloop:
        loadi  0x3d, r3
        out r3
        loadi  0x2d, r3
        out r3
        inc r1
        cmp r1, r2
        br bloop
        loadi 0x3d, r3
        out r3
        loadi 0xa, r3
        out r3
        pop r3
        pop r2
        pop r1
        mov r14, r15    # clean up the stack
        pop r14
        pop r15
        ret

hellostr:
.literal "Hello, world!"
xorintro:                        #Hello, world!
.literal "Xor cipher (with key = 'GOODBYE, ALL.'): "
xorkey:
.literal "GOODBYE, ALL."
xoroutro:
.literal "Decrypting..."
target:
.words 0x30
target2:
.words 0x30
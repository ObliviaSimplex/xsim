# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Test 3: Testing the kernel locks
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  
        loadi   letters, r1
        cpuid   r2
        add     r2, r1
        loadb   r1, r2
while1:
        call    lock
        loadi   1000, r0
while2:
        out     r2
        dec     r0
        test    r0, r0
        br      while2

        loadi   0x0a, r4        # newline
        out     r4
        call    unlock
        jr      while1









# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

lock:
  push   r13
  push   r12
spinlock:
  loadi  mutex, r13  # r13 now points to mutex variable
  tnset  r13, r12    # test and set value of mutex<-1, store prev val in r12
  test   r12, r12    # if mutex was already set, then another proc has locked it
  br     spinlock    # so wait your turn
  pop    r12         # restore registers
  pop    r13         
  ret                # that's all


# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

unlock:
  push     r13          # preserve registers
  push     r12          
  xor      r12, r12     # zero out r12
  loadi    mutex, r13   # r13 now points to mutex
  stora    r12, r13     # set mutex to 0, freeing the lock for others
  pop      r12          # restore registers
  pop      r13
  ret 

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


letters:
.literal "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

mutex:
.words 1